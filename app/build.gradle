apply plugin: 'com.android.application'
//apply plugin: 'com.android.databinding'

def customizeConfig = rootProject.ext.android //android配置
def rootDependencies = rootProject.ext.dependencies //库依赖

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


android {

    compileSdkVersion customizeConfig.compileSdkVersion
    flavorDimensions "default"
    defaultConfig {
        applicationId "com.dale.demo"
        minSdkVersion customizeConfig.minSdkVersion
        targetSdkVersion customizeConfig.targetSdkVersion
        versionCode appVersionCode as int
        versionName appVersionName
        multiDexEnabled true //拆包
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {// 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true    //加上这行即可
            }
        }
    }

    signingConfigs {
        config {
            storeFile file("./keystore/release.keystore.jks")
            storePassword "9999999999"
            keyAlias "lettery"
            keyPassword "9999999999"
        }
    }


//    dexOptions {
//        incremental true
//    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled false //true开启混淆配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            debuggable true
            minifyEnabled false //true开启混淆配置
            signingConfig signingConfigs.config
        }
    }

//    productFlavors {
//        dale{
//           dimension "tier"
//        }
//
//        div{
//           dimension "tier"
//        }
//    }


//    android.applicationVariants.all { variant -> //更新至Android Studio 3.3 gradle 4.10.1
//        variant.outputs.all {
//            outputFileName = "${variant.flavorName}_${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
//        }
//    }


//    sourceSets {
//        main.jniLibs.srcDirs = ['libs']
//    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        checkReleaseBuilds false //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        abortOnError false //  true--错误发生后停止gradle构建
        ignoreWarnings true //只报告error
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation rootDependencies["junit"]
    androidTestImplementation rootDependencies["test_runner"]
    androidTestImplementation rootDependencies["espresso_core"]
//    implementation rootDependencies['ABZxing']
    implementation project(':ABSupport')
    implementation project(':ABZxing')
    implementation project(':ABView')
    implementation project(':ABBaseAdapter')
    implementation project(':ABRefrshView')


    //系统库
    implementation rootDependencies["appcompat_v7"]
    implementation rootDependencies["constraint_layout"]
    implementation rootDependencies["recyclerview"]
    implementation rootDependencies["design"]
    implementation rootDependencies["cardview_v7"]
    implementation rootDependencies["material_spinner"]

    //热更新和bugly
    implementation rootDependencies["crashreport_upgrade"]
    implementation rootDependencies['nativecrashreport']
    //    implementation 'com.tencent.bugly:crashreport:2.8.6'//以上面二选一，包括热更新用上面有个
    implementation rootDependencies['tinker']

    //常用工具
    implementation rootDependencies["rxpermissions2"] //允许权限用到的一个
    implementation rootDependencies["glide_transformations"]
    implementation rootDependencies["glide_compiler"]
    implementation rootDependencies["glide"]
    implementation rootDependencies["rxjava"]
    implementation rootDependencies["rxandroid"]
    implementation rootDependencies["converter_gson"]
    implementation rootDependencies["retrofit"]
    implementation rootDependencies["adapter_rxjava2"]
    implementation rootDependencies["okhttp"]
    implementation rootDependencies["logging_interceptor"]
    implementation rootDependencies["butterknife"]
    implementation rootDependencies["butterknife_compiler"]
    api rootDependencies["multidex"]


    //第三方
    implementation rootDependencies["switchbutton"]
    implementation rootDependencies["photopicker"]
    implementation rootDependencies["bga_baseadapter"]
    implementation rootDependencies["zxing"]
//    implementation 'org.jetbrains:annotations-java5:15.0'

}

if ("true" == isTinker) {// 依赖热修复插件
    apply from: 'tinker-support.gradle'
}
// 依赖插件脚本

